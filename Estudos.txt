# Introdu√ß√£o a SQL com Firebird

<aside>
üìö Primeiros passos

</aside>

1 - O que o ISQL faz?

Conecta automaticamente ao banco de dados e podemos estar fazendo comandos

2 - Para que serve um banco de dados?

Serve para armazenar todos os dados de um sistema

3 - O que √© MVC e o que tem a ver com SQL?

MVC √© Movie View e Controller. 

- View √© aonde o usu√°rio ir√° visualizar, √© o HTML, CSS, Telas, VCL do Delphi
- Controller √© a regra de neg√≥cios do sistema
- Model √© representa√ß√£o de classes do banco de dados, s√£o as tabelas

<aside>
üìö Modelagem e Primeiras Opera√ß√µes

</aside>

1 - Como fazer um coment√°rio no SQL?

H√° o `/* */` para m√∫ltiplas linhas e tamb√©m o `‚Äî` para linhas √∫nicas

2 - O que √© Modelagem Conceitual?

√â um rascunho do banco de dados

```sql
	CLIENTE
		NOME 	 VARCHAR(30),
		CPF      VARCHAR(11),
		EMAIL    VARCHAR(100),
		TELEFONE VARCHAR(30),
		SEXO 	 CHAR(1),
		ENDERECO VARCHAR(100)
```

3 - O que √© Modelagem L√≥gica?

√â o software

4 - O que √© modelagem f√≠sica?

√â o script do banco de dados

5 - Como criamos um banco de dados no FB?

Abrimos o ISQL e digitamos `CREATE DATABASE '<Ditetorio>\NomeDoArquivo.FDB' user 'SYSDBA' password 'masterkey'`

6 - Como acessamos um banco de dados no FB?

Abrimos o ISQL e digitamos `connect '<Diretorio>' user 'SYSDBA' password 'masterkey'`

7 - Como fazemos para criar uma tabela?

Nos colocamos no ISQL a cria√ß√£o da tabela

```sql
CREATE TABLE CLIENTE(
NOME 	 VARCHAR(30),
CPF      VARCHAR(11),
EMAIL    VARCHAR(100),
TELEFONE VARCHAR(30),
SEXO 	 CHAR   (1),
ENDERECO VARCHAR(100));
```

8 - Como fazemos para ver se a tabela foi criada?

Vamos no ISQL e digitamos `show tables;`

9 - Como colocamos dados na tabela?

Utilizamos as combina√ß√µes `INSERT INTO` e `VALUES`

```sql
INSERT INTO CLIENTE(NOME, CPF, EMAIL, TELEFONE, SEXO, ENDERECO) VALUES ('EMANUEL', '12345678910', 'e@e.com', '+99 99 9 9999-9999', 'M', 'RUA TAL DO BAIRRO TAL E CIDADE TAL');
```

OU

```sql
INSERT INTO CLIENTE VALUES ('EMANUEL', '12345678910', 'e@e.com', '+99 99 9 9999-9999', 'M', 'RUA TAL DO BAIRRO TAL E CIDADE TAL');
```

‚ÄòPodemos‚Äô adicionar metade tamb√©m

```sql
INSERT INTO CLIENTE (NOME, CPF, SEXO) VALUES ('HALANA', '12345678910', 'F');
```

10 - Quais s√£o os tipos de dados?

- CHAR: Vai ocupar a quantidade de caracteres que voc√™ colocar, n√£o importa a quantidade setada e quantidade escrita;
- VARCHAR: N√£o ocupa todo o espa√ßo caso sobre

11 - Como podemos ver as colunas que temos na nossa tabela?

Digitamos `show table <nomeDaTabela>;`

12 - Como fazemos para puxar os dados do banco de dados?

Utilizamos o `SELECT` por exemplo: `SELECT * FROM CLIENTE;` podemos utilizar tamb√©m `SELECT nome, cpf FROM CLIENTE;`

13 - Como podemos mudar o nome da tabela?

Podemos utilizar o `AS` para ele ser visto de forma diferente, veja:

```sql
SELECT nome as name, telefone as phone, cpf as register FROM cliente;
```

14 - Como podemos filtrar o nossos campos?

Para filtrarmos n√≥s utilizamos o `WHERE` que significa ‚Äòaonde‚Äô, podemos utilizar o `LIKE` para dizer se aquela palavra est√° em algum lugar de um endere√ßo por exemplo, e utilizamos `%` se ele estiver assim `%botafogo` queremos dizer que ela √© a √∫ltima palavra, se for assim `botafogo%` dizemos que ela √© a primeira palavra e se for assim `%botafogo%` dizemos que antes e depois dela tem alguma coisa, veja os exemplos:

```sql
SELECT NOME, SEXO FROM CLIENTE WHERE SEXO = 'M';
```

H√° tamb√©m:

```sql
SELECT NOME, ENDERECO FROM CLIENTE WHERE ENDERECO LIKE '%BAIRRO%';
```

15 - Quais s√£o os os operadores l√≥gicos?

S√£o: AND; OR; IS NOT, veja:

```sql
SELECT nome from cliente where telefone is not null;
SELECT nome, cpf from cliente where cpf is not null and sexo = 'F';
```

16 - Como podemos saber quantos registros tem na tabela?

Utilizamos o `COUNT` e passamos o que queremos

```sql
// RETORNAR QUANTIDADE DE LINHAS
SELECT COUNT(*) FROM CLIENTE;

// MUDA O NOME DO COUNT
SELECT COUNT(*) AS "QUANTIDADE DE LINHAS NA TABELA" FROM CLIENTE;
```

17 - Como devemos usar o GROUP BY?

Utilizamos ele juntamente com o `COUNT`. Se usarmos apenas o COUNT ele vai contar todas as linhas, com o GROUP BY conseguimos diferenciar

```sql
-- VAI SELECIONAR TODOS OS SEXOS E RETORNAR ELES SEPARADOS
SELECT SEXO, COUNT(*) AS "QUANTIDADE" FROM CLIENTE GROUP BY SEXO;
```

18 - COMO PODEMOS FILTRAR ALGO NULO?

```sql
-- PARA FILTRAR ALGO QUE √â NULO USAMOS O IS NULL
SELECT NOME, ENDERECO FROM CLIENTE WHERE ENDERECO IS NULL;

-- PARA FILTRAR ALGO QUE N√ÉO √â NULO
SELECT NOME, ENDERECO FROM CLIENTE WHERE ENDERECO IS NOT NULL;
```

19 - Como podemos alterar o dados de forma segura?

Utilizamos o `UPDATE` e `WHERE` pois se n√£o colocarmos ele vai atualizar todos os dados;

```sql
UPDATE CLIENTE SET CPF = '12345678910' WHERE NOME = 'JOAO';
```

20 - Como podemos deletar dados de forma segura?

Utilizamos o `DELETE` com o `WHERE` para n√£o termos problema

```sql
DELETE FROM CLIENTE WHERE NOME = 'EMANUEL';
```

21 - O que √© cardinalidade?

O que define a cardinalidade √© a regra de neg√≥cio 

O 1¬™ algarismo fala sobre a obrigatoriedade

- 0 √© n√£o √© obrigat√≥rio;
- 1 √© obrigat√≥rio;

O 2¬∫ algarismo fala sobre a cardinalidade

- 1 aceita apenas um registro
- n aceita v√°rios registros

22 - Como podemos criar uma coluna √∫nica?

Utilizamos o `UNIQUE`: `CPF VARCHAR(15) UNIQUE;`

23 - Como podemos criar uma primary key no Firebird?

```sql
/*
	ALTER TABLE CLIENTE: Vai fazer ma altera√ß√£o na tabela cliente
	CONSTRAINT PKIDCLIENTE: Alterando para colocar uma CONSTRAINT e damos um nome para ela
	PRIMARY KEY(IDCLIENTE): Fala qual coluna da nossa tabela vai ser a chave prim√°ria
*/
ALTER TABLE CLIENTE CONSTRAINT PKIDCLIENTE PRIMARY KEY(IDCLIENTE);

-- OU

CREATE TABLE CLIENTE(
	IDCLIENTE INTEGER NOT NULL PRIMARY KEY;
);
```

24 - Como definimos a chave estrangeira?

Chave estrangeira √© uma chave prim√°ria de outra tabela que faz refer√™ncia, com isso n√≥s podemos interligar tabelas

- Em 1x1 a chave estrangeira fica na tabela mais fraca;
- Em 1xn a chave estrangeira fica na tabela N

---

```sql
-- CRIANDO O BANCO DE DADOS
CREATE DATABASE 'C:\BD\EXERCICIO.FDB' USER 'SYSDBA' PASSWORD 'MASTERKEY';

-- CONECTANDO NO BANCO DE DADOS
CONNECT 'C:\BD\EXERCICIO.FDB' USER 'SYSDBA' PASSWORD 'MASTERKEY';

-- CRIANDO TABELA CLIENTE
CREATE TABLE CLIENTE(
	IDCLIENTE INTEGER     NOT NULL,
	NOME      VARCHAR(30) NOT NULL
);

/*
	CRIANDO UMA SEQU√äNCIA ANTES DE CRIAR UMA CHAVE PRIM√ÅRIA
	ELE VAI CONTROLAR OS NOSSOS REGISTROS, PODEMOS CONTROLAR A PARTIR DE QUE REGISTRO ELE VAI COME√áAR A FUNCIONAR
	PARA O AUTO INCREMENTO FUNCIONAR N√ìS DEVEMOS CRIAR UMA TRIGGER QUE √â UM COMANDO QUE EXECUTA UM BLOCO DE C√ìDIGO QUANDO NOSSO BANCO DE DADOS √â ALTERADO
*/
CREATE SEQUENCE ID_CLIENTE;
-- CRIANDO UMA CHAVE PRIM√ÅRIA
ALTER TABLE CLIENTE ADD CONSTRAINT PKIDCLIENTE PRIMARY KEY(IDCLIENTE);
-- TRIGGER PARA CONTROLAR OS ID
/*
	CREATE TRIGGER TG_INSERTCLIENTE FOR CLIENTE BEFORE INSERT POSITION 0
	CREATE TRIGGER TG_INSERTCLIENTE: CRIAR UMA TRIGGER E ATRIBUIR UM NOME A ELA
	FOR CLIENTE: FALAMOS PARA QUAL TABELA ESSA TRIGGER IR√Å FUNCIONAR
	BEFORE INSERT POSITION 0: INSERIR A PARTIR DA POSI√á√ÉO 0
*/
CREATE TRIGGER TG_INSERTCLIENTE FOR CLIENTE BEFORE INSERT POSITION 0
AS
BEGIN
	/*
		NEW.IDCLIENTE: VAI CRIAR UM NOVO IDCLIENTE QUE VAI RECEBER UM GEN_ID
		GEN_ID('ID_CLIENTE', 1): GEN_ID √â UM INCREMENTO, VAI PEGAR O NOME DA SEQUENCIA QUE
			CRIAMOS 'ID_CLIENTE' E VAI INCREMENTAR COM O VALOR QUE PEGARMOS '1'
	*/
	NEW.IDCLIENTE = GEN_ID(ID_CLIENTE, 1);
END;

-- CRIANDO TABELA TELEFONE
CREATE TABLE TELEFONE(
	IDTELEFONE INTEGER NOT NULL,
	NUMERO     INTEGER,
	ID_CLIENTE INTEGER NOT NULL
);

CREATE SEQUENCE ID_TELEFONE;
ALTER TABLE TELEFONE ADD CONSTRAINT PKIDTELEFONE PRIMARY KEY(IDTELEFONE);
ALTER TABLE TELEFONE ADD CONSTRAINT FKID_CLIENTE_TELEFONE FOREING KEY(ID_CLIENTE) REFERENCES(CLIENTE);
CREATE TRIGGER TG_INSERTTELEFONE FOR TELEFONE BEFORE INSERT POSITION 0
AS
BEGIN
	NEW.IDTELEFONE = GEN_ID(ID_TELEFONE, 1);
END;

-- CRIANDO TABELA CARRO
CREATE TABLE CARRO(
	IDCARRO INTEGER NOT NULL,
	NOME    VARCHAR(30) NOT NULL,
	MARCA   VARCHAR(30) NOT NULL,
	ID_CLIENTE INTEGER NOT NULL
);

CREATE SEQUENCE ID_CARRO;
ALTER TABLE CARRO ADD CONSTRAINT PKIDCARRO PRIMARY KEY(IDCARRO);
ALTER TABLE CARRO ADD CONSTRAINT FKID_CLIENTE_CARRO FOREING KEY(ID_CLIENTE) REFERENCES(CLIENTE);
CREATE TRIGGER TG_INSERTCARRO FOR CARRO BEFORE INSERT POSITION 0
AS
BEGIN
	NEW.IDCARRO = GEN_ID(ID_CARRO, 1);
END;
```

OU

```sql
CREATE TABLE CARRO(
	IDCLIENTE INTEGER NOT NULL
);

ALTER TABLE CLIENTE ADD CONSTRAINT FK_IDCLIENTE KEY(IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE);
```

25 - O que √© Query?

Query √© uma consulta SQL

26 - Como fazemos uma chave prim√°ria?

Fazemos isso na cria√ß√£o do banco de dados:

```sql
CREATE TABLE CLIENTE (
	IDCLIENTE INTEGER NOT NULL,
	NOME VARCHAR(60),
	PRIMARY KEY(IDCLIENTE)
);
```

27 - Como fazemos uma chave estrangeira?

Fazemos a cria√ß√£o da chave estrangeira na cria√ß√£o da tabela

```sql
CREATE TABLE TELEFONE (
	IDTELEFONE INTEGER NOOT NULL,
	TELEFONE VARCHAR(30),
	IDCLIENTE INTEGER,
	PRIMARY KEY(IDTELEFONE),
	FOREIGN KEY(IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE);
);
```

28 - Como criamos uma trigger para adicionar um auto incremento de ID?

```sql
CREATE TRIGGER TG_INSERTIDCLIENTE FOR CLIENTE
BEFORE INSERT POSITION 0
AS
BEGIN
	NEW.IDCLIENTE = COALESCE((SELECT MAX(IDCLIENTE) FROM CLIENTE), 0) + 1;
END ^
```

29 - Como podemos juntar tabelas?

Utilizamos o `INNER JOIN` e damos algumas nomenclaturas para conseguirmos identificar qual √© qual, veja:

```sql
SELECT C.NOME, T.TELEFONE, E.UF
FROM CLIENTE C
INNER JOIN TELEFONE T ON C.IDCLIENTE = T.IDCLIENTE
INNER JOIN ENDERECO E ON C.IDCLIENTE = E.IDCLIENTE
WHERE E.UF = 'RJ' AND T.TIPO = 'RES';
```

30 - O que o `COALESCE` faz?

N√≥s conseguimos setar um valor para quando h√° um valor nulo

```sql
SELECT C.NOME, COALESCE(C.EMAIL, 'SEM EMAIL'), T.EMAIL
```

31 - O que √© VIEW?

A `VIEW` n√≥s conseguimos deixar um padr√£o caso n√≥s queiramos ver um relat√≥rio, a VIEW √© uma query, e vamos utilizar uma query para ver a query

```sql
CREATE OR ALTER VIEW V_CLIENTES AS
	SELECT C.IDCLIENTE AS ID, C.NOME, C.SEXO AS GENERO, T.TELEFONE, T.TIPO, E.UF AS ESTADO
	FROM CLIENTE C
	INNER JOIN TELEFONE T ON T.IDCLIENTE = C.IDCLIENTE
	INNER JOIN ENDERECO E ON E.IDCLIENTE = C.IDCLIENTE;
```

Conseguimos ver assim:

```sql
SELECT * FROM V_CLIENTES;
```

Podemos colocar condicionais tamb√©m:

```sql
SELECT * FROM V_CLIENTES WHERE NOME = 'Cliente 1';
```

32 - Conseguimos dar `UPDATE` em alguma VIEW?

Sim, apenas se ela n√£o tiver `INNER JOIN`

33 - Como fazemos para ver as `VIEW`?

Podemos digitar: `SHOW VIEW;`

34 - Para que serve o `ORDER`?

Serve para ordenarmos a nossa busca, podemos ordenar por ordem alfab√©tica e tamb√©m por ordem ascendente (asc) ou descendente (desc)podemos ordenar por colunar tamb√©m, colocando o √≠ndice que queremos

```sql
-- ORDEM ALFAB√âTICA
SELECT C.NOME, T.TELEFONE, E.UF
FROM CLIENTE C
INNER JOIN TELEFONE T ON T.IDTELEFONE = C.IDCLIENTE
INNER JOIN ENDERECO E ON E.IDENDERECO = C.IDCLIENTE
ORDER BY C.NOME;

-- ORDEM CRESCENTE
SELECT C.NOME, T.TELEFONE, E.UF
FROM CLIENTE C
INNER JOIN TELEFONE T ON T.IDTELEFONE = C.IDCLIENTE
INNER JOIN ENDERECO E ON E.IDENDERECO = C.IDCLIENTE
ORDER BY T.TELEFONE ASC;

-- ORDEM DECRESCENTE
SELECT C.NOME, T.TELEFONE, E.UF
FROM CLIENTE C
INNER JOIN TELEFONE T ON T.IDTELEFONE = C.IDCLIENTE
INNER JOIN ENDERECO E ON E.IDENDERECO = C.IDCLIENTE
ORDER BY T.TELEFONE DESC;

-- ORDEM POR √çNDICE
SELECT C.NOME, T.TELEFONE, E.UF
FROM CLIENTE C
INNER JOIN TELEFONE T ON T.IDTELEFONE = C.IDCLIENTE
INNER JOIN ENDERECO E ON E.IDENDERECO = C.IDCLIENTE
ORDER BY 1;

SELECT C.NOME, T.TELEFONE, E.UF
FROM CLIENTE C
INNER JOIN TELEFONE T ON T.IDTELEFONE = C.IDCLIENTE
INNER JOIN ENDERECO E ON E.IDENDERECO = C.IDCLIENTE
ORDER BY 1 DESC;

SELECT C.NOME, T.TELEFONE, E.UF
FROM CLIENTE C
INNER JOIN TELEFONE T ON T.IDTELEFONE = C.IDCLIENTE
INNER JOIN ENDERECO E ON E.IDENDERECO = C.IDCLIENTE
ORDER BY 1 ASC;
```

35 - O que √© delimitador?

Delimitador √© o que diz aonde acaba nosso c√≥digo, por padr√£o √© o ‚Äò;‚Äô mas conseguimos mudar com `SET TERM OQVCQUISER ;` exemplo: `SET TERM ^ ;` ou `SET TERM # ;`

36 - O que o `MAX` faz?

O `MAX` retorna o maior valor, exemplo: `SELECT MAX(JANEIRO) AS MAIOR_VALOR FROM VENDEDORES;`

36 - O que o `MIN` faz?

O `MIN` retorna o maior valor, exemplo: `SELECT MIN(JANEIRO) AS MENOR_VALOR FROM VENDEDORES;`

37 - O que devemos fazer quando formos usar uma fun√ß√£o de agrega√ß√£o?

Devemos utilizar o `GROUP BY` quando formos colocar uma coluna que n√£o tem agrega√ß√£o agrupando a coluna que n√£o tem agrega√ß√£o, no caso, o √≠ndice 1, exemplo:

```sql
SELECT
	SEXO, -- COLUNA SEM AGREGA√á√ÉO
	SUM(JANEIRO) AS TOTAL_JAN
FROM
	VENDEDORES
GROUP BY 1;
```

38 - O que o `AVG` faz?

Ele retorna a m√©dia de valores `SELECT AVG(JANEIRO) AS MEDIA_VALOR FROM VENDEDORES;`

39 - Para que serve o `SUM`?

Serve para calcularmos o total daquela 

40 - O que √© subquary?

Subquary √© uma quary dentro de outra, sempre quando h√° uma subquery ela √© lida antes da query principal

```sql
-- SELECIONAR O NOME E VALOR DO MENOR VENDEDOR DE MAR√áO
SELECT NOME, MARCO AS MIN_MARCO 
FROM VENDEDORES 
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

-- QUEM VENDEU MENOS EM MARCO
SELECT NOME, MARCO AS MIN_MARCO FROM VENDEDORES WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

-- QUEM VENDEU MAIS EM MARCO
SELECT NOME, MARCO AS MAIS_MARCO FROM VENDEDORES WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

-- QUEM VENDEU ACIMA DA M√âDIA EM FEVEREIRO
SELECT NOME, FEVEREIRO AS ACIMA_FEV FROM VENDEDORES WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);
SELECT NOME, FEVEREIRO AS ACIMA_FEV FROM VENDEDORES WHERE FEVEREIRO < (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

SELECT NOME, FEVEREIRO AS ACIMA_FEV, (SELECT AVG(FEVEREIRO) FROM VENDEDORES) AS MEDIA FROM VENDEDORES WHERE FEVEREIRO < (SELECT AVG(FEVEREIRO) FROM VENDEDORES)
```

41 - Como funciona os operadores aritm√©ticos no SQL?

Podemos utilizar eles normalmente, veja:

```sql
-- SOMANDO
SELECT NOME, JANEIRO, FEVEREIRO, MARCO, (JANEIRO + FEVEREIRO + MARCO) AS TOTAL FROM VENDEDORES;

-- TIRANDO A M√âDIA
SELECT NOME, JANEIRO, FEVEREIRO, MARCO, (JANEIRO + FEVEREIRO + MARCO) AS TOTAL, ((JANEIRO + FEVEREIRO + MARCO) / 3) AS MEDIA FROM VENDEDORES;
```

42 - Quais s√£o os tipos de procedures?

1. Passagem de par√¢metros;
2. Retorno de um resultado

43 - Para que serve o `SUSPEND`?

Serve para interromper o c√≥digo e retornar o valor para a procedure

44 - Como criar uma procedure?

```sql
SET TERM #;

CREATE OR ALTER PROCEDURE NOMEPROCEDURE
AS
BEGIN
	-- C√ìDIGO
END#

// EXEMPLO DE UMA SOMA
CREATE PROCEDURE SOMA(VALOR1 INTEGER, VALOR2 INTEGER)
RETURNS(RESULTADO INTEGER)
AS
BEGIN
	RESULTADO = VALOR1 + VALOR2;
	SUSPEND; -- SUSPENDENDO O VALOR
END#
```

45 - Como podemos ver quais procedures existem?

`SHOW PROCEDURES;`

46 - Como podemos executar uma procedure?

`EXECUTE PROCEDURE NOMEPROCEDURE(PARAMETROS)#`

OU

`SELECT * FROM NOMEPROCEDURE(PARAMETROS)#`

47 - Como colocamos uma vari√°vel dentro da nossa procedure?

Utilizamos o `DECLARE VARIABLE`, veja:

```sql
CREATE OR ALTER PROCEDURE SOMA(VALOR1 INTEGER, VALOR2 INTEGER)
RETURNS (RESULTADO INTEGER)
AS
DECLARE VARIABLE VALOR3 INTEGER;
BEGIN
	VALOR3 = 30;
	RESULTADO = VALOR1 + VALOR2 + VALOR3 + 2;
	SUSPEND;
END#
```

48 - Como podemos apagar uma procedure?

Utilizamos `DROP PROCEDURE NOMEPROCEDURE#`

49 - Como adicionamos uma nova coluna?

```sql
ALTER TABLE CLIENTE ADD COLUNA_NOVA VARCHAR(30);
```

50 - Como passamos os dados de uma coluna para outra?

```sql
UPDATE CURSO SET COLUNA_NOVA = COLUNA_ANTIGA;
```

51 - Como exclu√≠mos uma coluna?

```sql
ALTER TABLE CURSO DROP COLUNA_ANTIGA;
```

52 - Como podemos alterar a posi√ß√£o da coluna na tabela?

```sql
ALTER TABLE CURSO ALTER COLUNA8 POSITION 1;
```

### Tabela base

```sql
----------------------------------------------------------------------
-- CRIAR BANCO DE DADOS
CREATE DATABASE 'C:\BD\EXERCICIOQUERY.FDB' USER 'SYSDBA' PASSWORD 'MASTERKEY';
----------------------------------------------------------------------

----------------------------------------------------------------------
-- CONECTAR AO BANCO DE DADOS
CONNECT 'C:\BD\EXERCICIOQUERY.FDB' USER 'SYSDBA' PASSWORD 'MASTERKEY';
----------------------------------------------------------------------

----------------------------------------------------------------------
-- CRIAR TABELA CLIENTE
CREATE TABLE CLIENTE (
	IDCLIENTE INTEGER NOT NULL,
	NOME VARCHAR(30),
	PRIMARY KEY(IDCLIENTE)
);
----------------------------------------------------------------------

----------------------------------------------------------------------
-- CRIAR TABELA ENDERECO
CREATE TABLE ENDERECO (
	IDENDERECO INTEGER NOT NULL,
	IDCLIENTE  INTEGER,
	ENDERECO   VARCHAR(50),
	PRIMARY KEY(IDENDERECO),
	FOREIGN KEY(IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE)
);
----------------------------------------------------------------------

----------------------------------------------------------------------
-- CRIAR TABELA TELEFONE
CREATE TABLE TELEFONE (
	IDTELEFONE INTEGER NOT NULL,
	IDCLIENTE  INTEGER,
	TELEFONE   VARCHAR(20),
	PRIMARY KEY(IDTELEFONE),
	FOREIGN KEY(IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE)
);
----------------------------------------------------------------------

----------------------------------------------------------------------
SET TERM ^ ;
----------------------------------------------------------------------

----------------------------------------------------------------------
CREATE TRIGGER TG_INSERTIDCLIENTE FOR CLIENTE
BEFORE INSERT POSITION 0
AS
BEGIN
	NEW.IDCLIENTE = COALESCE((SELECT MAX(IDCLIENTE) FROM CLIENTE), 0) + 1;
END ^
----------------------------------------------------------------------

----------------------------------------------------------------------
CREATE TRIGGER TG_INSERTIDTELEFONE FOR TELEFONE
BEFORE INSERT POSITION 0
AS
BEGIN
NEW.IDTELEFONE = COALESCE((SELECT MAX(IDTELEFONE) FROM TELEFONE), 0) + 1;
END ^
----------------------------------------------------------------------

----------------------------------------------------------------------
CREATE TRIGGER TG_INSERTIDENDERECO FOR ENDERECO
BEFORE INSERT POSITION 0
AS
BEGIN
NEW.IDENDERECO = COALESCE((SELECT MAX(IDENDERECO) FROM ENDERECO), 0) + 1;
END ^
----------------------------------------------------------------------
```

### 2¬™ Tabela base